class UnionFind:
    def __init__(self):
        self.parent = {}
        self.count = 0

    def find(self, x):
        if self.parent[x] == x:
            return x
        self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, a, b):
        root_a = self.find(a)
        root_b = self.find(b)
        if root_a != root_b:
            self.parent[root_a] = root_b
            self.count -= 1

    def add(self, x):
        self.parent[x] = x
        self.count += 1


class Solution:
    """
    @param grid: a boolean 2D matrix
    @return: an integer
    """
    def numIslands(self, grid):
        # write your code here
        uf = UnionFind()
        dx = [0, -1]
        dy = [-1, 0]

        n = len(grid)
        m = len(grid[0])

        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1:
                    uf.add(i * m + j)
                    for k in range(2):
                        new_i = i + dx[k]
                        new_j = j + dy[k]
                        if new_i >= 0 and new_i < n and new_j >=0 and new_j < m and grid[new_i][new_j] == 1:
                            uf.union(i * m + j, new_i * m + new_j)
        return uf.count


#[[0,1,1,1,1,0,0,1,0,1,1,1,1,1,1,0,0,1,1,0],[0,0,0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0],[0,1,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1],[1,0,0,1,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0],[0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,1,0],[0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1],[0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,1],[1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1],[1,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0],[1,0,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,0,1,0],[0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,1],[0,1,0,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0],[1,1,1,0,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0],[0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,0],[0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1],[0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,1,0],[1,0,0,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0],[1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,1,1,1,0],[0,1,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0],[0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0]]
# 47

a = [
    [0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0],
    [0,1,0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0],
    [1,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0],
    [1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1],
    [0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0],
    [0,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0],
    [0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0],
    [0,1,1,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0],
    [0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1],
    [1,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,0],
    [0,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,1,1,0,1],
    [0,0,1,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1],
    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0],
    [0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1],
    [1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0],
    [1,0,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1],
    [1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1],
    [0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,1],
    [1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1],
    [0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0]
]
i = [
    [0,0,0,0,0,0,1,1,0,0,0,0],
    [0,0,0,0,0,0,1,1,0,0,0,0],
    [0,0,0,0,0,1,0,1,1,1,1,0],
    [0,0,1,0,0,1,1,1,1,1,1,1],
    [0,1,1,1,1,0,1,0,0,0,0,0],
    [0,1,0,1,0,0,1,0,0,0,0,0],
    [1,1,1,0,0,1,1,0,0,0,0,0],
    [1,0,1,1,0,1,1,0,0,1,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0],
    [0,0,0,0,0,0,0,1,0,1,1,0],
    [0,0,0,0,0,0,1,1,1,1,0,0],
    [0,0,0,0,0,0,1,0,0,1,0,0],
    [0,0,0,0,0,0,1,1,1,0,0,0],
    [0,0,0,0,0,0,0,1,1,0,0,0],
    [0,0,0,0,0,0,0,0,0,1,1,0],
    [0,0,0,0,0,0,0,0,0,0,1,1],
    [0,0,0,0,0,0,0,0,0,0,1,1],
    [0,0,0,0,0,0,0,0,0,1,0,1],
    [0,0,0,0,0,0,0,0,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,1,0,0]
    ]
i2 = [
    [0,0,0,0,0,0,1,1,0,0,0,0],
    [0,0,0,0,0,0,1,1,0,0,0,0],
    [0,0,0,0,0,1,0,1,1,1,1,0],
    [0,0,1,0,0,1,1,1,1,1,1,1],
    [0,1,1,1,1,0,1,0,0,0,0,0],
    [0,1,0,1,0,0,1,0,0,0,0,0],
    [1,1,1,0,0,1,1,0,0,0,0,0],
    [1,0,1,1,0,1,1,0,0,0,0,0]
]

print(Solution().numIslands(i))

# 43 - 45